- content_for :page_title do
  #{display_name(@account)} (#{acct(@account)})

- content_for :header_tags do
  - if @account.user_prefers_noindex?
    %meta{ name: 'robots', content: 'noindex, noarchive' }/

  %link{ rel: 'alternate', type: 'application/rss+xml', href: @rss_url }/
  %link{ rel: 'alternate', type: 'application/activity+json', href: ActivityPub::TagManager.instance.uri_for(@account) }/

  - @account.fields.select(&:verifiable?).each do |field|
    %link{ rel: 'me', type: 'text/html', href: field.value }/

  = opengraph 'og:type', 'profile'
  = render 'og', account: @account, url: short_account_url(@account, only_path: false)

= render partial: 'shared/web_app'

- Rails.logger.debug("@profile_data: #{@profile_data.inspect}")

:javascript
  console.log('javascript!!');

  window.onload = async function() {
    console.log('Window onload!!');
    // Function to check if a string is a valid URL
    function isValidURL(str) {
      // Regex to match strings with a period and no spaces
      var regex = /^[^\s.]+(\.[^\s]+)+$/;
      return regex.test(str);
    }

    function waitForElement(selector, callback) {
      var element = document.querySelector(selector);
      if (element) {
        callback(element);
      } else {
        setTimeout(function() {
          waitForElement(selector, callback);
        }, 100); // Check again after 100 milliseconds
      }
    }

    function generateListings(socialConfigurations, bioElement) {
      socialConfigurations.forEach(function(config) {
        console.log('config:', config); // Log the HTML content before appending
        
        var badgeTitle = config.dataPointName;
        var badgeUrl = config.displayValue;

        // Create and append badge line
        var badgeLine = createBadgeLine(badgeTitle, badgeUrl);
        bioElement.appendChild(badgeLine);
      });
    }

    function createBadgeLine(title, linkText) {
      console.log('title:', title); // Log the HTML content before appending
      var badgeLine = document.createElement("dl");
      badgeLine.className = title.includes("Unknown") ? "" : "verified";

      var badgeTitle = document.createElement("dt");
      badgeTitle.className = "translate";
      badgeTitle.innerText = title;
      badgeLine.appendChild(badgeTitle);

      var badgeLink = document.createElement("dd");
      badgeLink.className = "translate";

      var badgeLinkText = linkText ? linkText : "Unknown";
      // Check if the linkText is a valid URL
      if (isValidURL("https://" + badgeLinkText)) {
        badgeLink.innerHTML = `<span><i class="${title.includes("Unknown") ? "" : "fa fa-check-circle"} "></i></span> <span><a href="https://${badgeLinkText}" target="_blank" rel="nofollow noopener noreferrer me" translate="no"><span class="invisible">https://</span><span class="">${badgeLinkText}</span><span class="invisible"></span></a></span>`;
      } else {
        badgeLink.innerHTML = `<i class="${title.includes("Unknown") ? "" : "fa fa-check-circle"} "></i>${badgeLinkText}</span>`;
      }

      badgeLine.appendChild(badgeLink);

      return badgeLine;
    }


    waitForElement('.account__header__fields', function(bioElement) {
      console.log('Before appending badge:', bioElement.innerHTML); // Log the HTML content before appending
      var profileData = #{@profile_data.to_json};
      console.log('profileData:', profileData); // Log the HTML content before appending

      // Define the filter function
      function filterDataConfigurations(myData, dataPointType, dataPointKind) {
        if (!myData || !myData.dataConfigurations) {
          return [];
        }
        var filteredData = myData.dataConfigurations.filter(function(config) {
          if (dataPointType.length) {
            return config.dataPointType === dataPointType && config.dataPointKind === dataPointKind;
          }
          return config.dataPointKind === dataPointKind;
        });
        return filteredData;
      }

      var rank = profileData.authorRank ? profileData.authorRank : "";
      var score = profileData.authorRankScore ? profileData.authorRankScore + " of 5" : "Ask this member to turn on verified identity";
      var rankScore = rank + " " + score;
      var badge = createBadgeLine(profileData.authorRank ? "Verified Identity" : "Unknown Identity", rankScore);

      bioElement.appendChild(badge);

      // Get all social data configurations
      var personalConfigurations = filterDataConfigurations(profileData, "", "personal");
      var primaryConfigurations = filterDataConfigurations(profileData, "", "primary");
      var additionalConfigurations = filterDataConfigurations(profileData, "", "additional");
      var socialConfigurations = filterDataConfigurations(profileData, "", "social");
      var fullNameOnly = filterDataConfigurations(profileData, "fullName", "contact");
      console.log('profileData:', profileData); // Log the HTML content after appending
      console.log('personalConfigurations:', personalConfigurations); // Log the HTML content after appending
      console.log('primaryConfigurations:', primaryConfigurations); // Log the HTML content after appending
      console.log('additionalConfigurations:', additionalConfigurations); // Log the HTML content after appending
      console.log('socialConfigurations:', socialConfigurations); // Log the HTML content after appending
      console.log('fullNameOnly:', fullNameOnly); // Log the HTML content after appending

      var allConfigurations = personalConfigurations
        .concat(primaryConfigurations)
        .concat(additionalConfigurations)
        .concat(socialConfigurations)
        .concat(fullNameOnly);

      console.log('profileData.dataConfigurations:', profileData.dataConfigurations); // Log the HTML content after appending

      generateListings(profileData.dataConfigurations, bioElement);

      console.log('After appending badge:', bioElement.innerHTML); // Log the HTML content after appending
    });
  };


